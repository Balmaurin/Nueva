{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/contexts/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (username: string, password: string) => Promise<{ success: boolean; message: string }>;\n  register: (username: string, email: string, password: string) => Promise<{ success: boolean; message: string }>;\n  logout: () => void;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Verificar si hay un token almacenado\n    const storedToken = localStorage.getItem('access_token');\n    if (storedToken) {\n      setToken(storedToken);\n      // Verificar token con el backend\n      verifyToken(storedToken);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const verifyToken = async (token: string) => {\n    try {\n      const response = await fetch('http://localhost:8002/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Origin': window.location.origin,\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setUser(data.user);\n      } else {\n        // Token inválido, limpiar\n        localStorage.removeItem('access_token');\n        setToken(null);\n        setUser(null);\n      }\n    } catch (error) {\n      console.error('Error verificando token:', error);\n      localStorage.removeItem('access_token');\n      setToken(null);\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (username: string, password: string): Promise<{ success: boolean; message: string }> => {\n    try {\n      const response = await fetch('http://localhost:8002/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Origin': window.location.origin, // Agregar origin explícitamente\n        },\n        body: JSON.stringify({ identifier: username, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.access_token) {\n        const userData = data.user || { id: '1', username: username, email: '', role: 'user' };\n        const authToken = data.access_token;\n        const message = data.message || 'Inicio de sesión exitoso';\n\n        setUser(userData);\n        setToken(authToken);\n        localStorage.setItem('access_token', authToken);\n\n        return { success: true, message: message || 'Inicio de sesión exitoso' };\n      } else {\n        return { success: false, message: data.message || 'Credenciales inválidas' };\n      }\n    } catch (error) {\n      console.error('Error en login:', error);\n      return { success: false, message: 'Error de conexión' };\n    }\n  };\n\n  const register = async (username: string, email: string, password: string): Promise<{ success: boolean; message: string }> => {\n    try {\n      const response = await fetch('http://localhost:8002/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Origin': window.location.origin,\n        },\n        body: JSON.stringify({ username, email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok && !data.error) {\n        return { success: true, message: 'Usuario registrado exitosamente. Ahora puedes iniciar sesión.' };\n      } else {\n        return { success: false, message: data.error || 'Error al registrar usuario' };\n      }\n    } catch (error) {\n      console.error('Error en registro:', error);\n      return { success: false, message: 'Error de conexión' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('access_token');\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    isLoading,\n    isAuthenticated: !!user && !!token,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}